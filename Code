par(family="serif")

bps0 = 259.35
pps0 = 120.48
v = c(1, 1.077, 1.052, 1.04, 1.947, 1.374, 1.212, 2.382, 1.535, 1.298, 3.69, 2.017, 1.557)
v = v*1
n = length(v) #### Number of Observations
samples = 1000000 #### number of data points for densities

iter = 10000 ##### Metropolis Hastings Iterations
pred = iter #### number of data points for prior and posterior checks
burnin = 1000 ### Burn-In to Discard
par(mfrow = c(1,1))

### Prior Calibrations


# Normal
muprn <- 1
sdprn <- 0.1

# Uniform 
minprn = -1
maxprn = 3

# Chisquared

kprn = 3

# Gamma

aprn = 5
bprn = 4

# Proposal Function Calibrations

mupro = 0
sdpro = 1

### Normal Model (Closed Form, Variance known)

### Likelihood

mulin <- mean(v)
sdlin2 <- var(v)
sdlin <- sqrt(sdlin2)

### Posterior

sdpon2 <- 1/(n/sdlin2+1/sdprn^2)
mupon <- sdpon2*(muprn/sdprn^2+n*mulin/sdlin2)
sdpon = sdpon2^0.5

### Plots

plot(density(rnorm(samples,mean=mupon, sd = sdpon)), xlim = c(0,2))
lines(density(rnorm(samples,mean=muprn, sd = sdprn)), lty = 2)
lines(density(rnorm(samples,mean=mulin, sd = sdlin)), lty = 3)


### Normal  Model (MH Algorithm)


# Likelihood

likelihood = function(mu){
  sll <- dnorm(v, mean=mu, sd = sdlin, log = T)
  sumll <- sum(sll)
  return(sumll)
}

# plot likelihood function

slopevalues = function(mu){
  return(likelihood(mu))}
slopelikelihoods = lapply(seq(0, 3, by=.05), slopevalues)
plot (seq(0, 3, by=.05), slopelikelihoods , type="l", xlab = "??", ylab = "Log Likelihood")
abline(v=mulin, lty=4)


# Priors


Priortype = "Histogram and Densities"


# Uniform Prior

#prior = function (mu){
#  dunif(mu ,min=minprn, max=maxprn, log = T)
#} 

# Normal Prior

#prior = function (mu){
#dnorm(mu, mean = muprn, sd = sdprn, log = T)
#} 

# Gamma Prior


#prior = function (mu){
#  dgamma(mu, aprn, bprn, log = T)
#  
#} 

# Chi-Squared Prior


prior = function (mu){
  muprior <- dchisq(mu, kprn, log = T)
  return(muprior)
} 

# posterior to sample from

target = function(mu){
  return(likelihood(mu) + prior(mu))
}

# MH algorithm

mu = rep(0,iter)
mu[1] = 0.5   
for(i in 2:iter){
  cur_mu = mu[i-1]
  prop_mu = cur_mu + rnorm(1,mean=mupro,sd=sdpro)
  A = exp(target(prop_mu)-target(cur_mu)) 
  if(runif(1)<A){
    mu[i] = prop_mu     
  } else {
    mu[i] = cur_mu     
  }
}


# prior and likelihood densities

densprn=density(rchisq(samples, kprn))
denslin=density(rnorm(samples, mean=mulin, sd=sdlin ))



### Calculate posterior probability of v > p

par(mfrow = c(2,1))

vmu <- mu
hist(vmu, breaks=40, freq=FALSE, xlab = "V/B", xlim = c(0,3), ylim=c(0,5), main = Priortype)
legend(x = "topright",
       legend = c("Prior", "Likelihood", "Posterior"),
       lty = c(3,2,1))


lines(density(vmu))
lines(denslin, lty=2)
lines(densprn, lty=3)
abline(v=pps0/bps0, lty = 4)

simmupon = mean(mu)
simsdpon = sd(mu)

## Trace plot

plot(mu, type = "l", xlab = "Iteration", ylab ="??", main = "Traceplot for ??")
abline(v=burnin, lty=2)

min(vmu)
max(vmu)

# Prior and Posterior predictive checks
# Prior

# Step 1: Sample from prior
# Step 2: Sample from likelihood using the sample from posterior


#priopred = 1
#prio = 1
#for(i in 1:iter){
#  prio[i] = rnorm(1,muprn, sdprn, log = T)
#  priopred[i] = rnorm(1,prio[i], sdlin, log = T)
#  
#}

#plot(density(priopred))



# Posterior

par(mfrow = c(1,1))

postpred = 0
post = mu
for(i in 1:iter){
  postpred[i] = rnorm(1,post[i], sdlin)
}
hist(postpred, freq=FALSE, main = "Posterior Predictive Histogram & Density", xlab = "VB*")
lines(density(postpred))









