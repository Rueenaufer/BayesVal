par(family="serif")

bps0 = 259.35
#pps0 = 120.48
pps0 = 534
v = c(1, 1.077, 1.052, 1.04, 1.947, 1.374, 1.212, 2.382, 1.535, 1.298, 3.686, 2.017, 1.556)
mult= 1
v = v*mult
n = length(v) #### Number of Observations
samples = 1000000 #### number of data points for densities

iter = 100000 ##### Metropolis Hastings Iterations
pred = iter #### number of data points for prior and posterior checks
burnin = 2000 ### Burn-In to Discard
par(mfrow = c(1,1))


### Prior Calibrations

# Chisq

muprn = 5






### Model (MH Algorithm)

# Likelihood

likelihood = function(mu){
  sll <- dchisq(v, mu, log = T)
  sumll <- sum(sll)
  return(sumll)
}

# plot likelihood function

likevalues = function(mu){
  return(likelihood(mu))}
likelihoodval = lapply(seq(0.01, 5*mult, by=.01), likevalues)
lik = as.data.frame(likelihoodval, col.names =seq(0.01, 5*mult, by=0.01))
mlemu <- colnames(lik)[apply(lik,1,which.max)]
mlemu = as.double(gsub("X","",mlemu))
plot (seq(0.01, 5*mult, by=.01), likelihoodval , type="l", xlab = "??", ylab = "Log Likelihood")
abline(v=mlemu, lty = 2)


# Proposal Function Calibrations

mupro = 0
sdpro = 0.1


# Prior

prior = function (mu){
  dchisq(mu, muprn, log = T)
} 


# posterior to sample from

target = function(mu){
  return(likelihood(mu) + prior(mu))
}

# MH algorithm

mu = rep(0,iter)
mu[1] = 3   
for(i in 2:iter){
  cur_mu = mu[i-1]
  prop_mu = cur_mu + rnorm(1, mean=mupro,sd=sdpro)
  A = exp(target(prop_mu)-target(cur_mu)) 
  if(runif(1)<A){
    mu[i] = prop_mu     
  } else {
    mu[i] = cur_mu     
  }
}

# densities of prior and likelihood

priorsim = rchisq(samples, muprn)
liksim = rchisq(samples, mlemu)

densprn=density(priorsim)
denslin=density(liksim)

### Calculate posterior probability of v > p

par(mfrow = c(2,1))

vmu <- mu
hist(vmu, breaks=40, freq=FALSE, xlab = "??", xlim = c(0,5*mult), main = "Histogram and Densities")
legend(x = "topright",
       legend = c("Prior", "Likelihood", "Posterior"),
       lty = c(3,2,1))
lines(density(mu))
lines(denslin, lty=2)
lines(densprn, lty=3)


## Trace plot

plot(mu, type = "l", xlab = "Iteration", ylab ="??", main = "Traceplot for ??")
abline(v=burnin, lty=2)

min(vmu)
max(vmu)

# Prior and Posterior predictive checks
# Prior

# Step 1: Sample from prior/posterior
# Step 2: Sample from likelihood using the sample from prior/posterior

par(mfrow = c(1,1))

priopred = 1
prio = 1
for(i in 1:iter){
  prio[i] = rchisq(1,muprn)
  priopred[i] = rchisq(1,prio[i])
  
}
hist(priopred, freq=FALSE, main = "Prior Predictive Histogram and Density", xlab = "VB'", xlim=c(0,15), breaks=100)
axis(side=1, at=seq(0,15, by =1))
lines(density(priopred, from = 0), lwd =2)
abline(v=pps0/bps0, lty = 2, lwd = 2)
legend(x = "topright",
       legend = c("Density", "Price"),
       lty = c(1,2))


# Posterior


postpred = 0
post = mu
for(i in 1:iter){
  postpred[i] = rchisq(1, post[i])
}
hist(postpred, freq=FALSE, main = "Posterior Predictive Histogram and Density", xlim=c(0,15), xlab = "VB*", breaks=100)
axis(side=1, at=seq(0,15, by =1))
lines(density(postpred, from = 0), lwd =2)
abline(v=pps0/bps0, lty = 2, lwd = 2)
legend(x = "topright",
       legend = c("Density", "Price"),
       lty = c(1,2))

# prior and posterior predictive for V

priopredv = priopred*bps0
postpredv = postpred*bps0


IVPRPROB <- sum(priopredv>pps0)/iter
IVPOPROB <- sum(postpredv>pps0)/iter









